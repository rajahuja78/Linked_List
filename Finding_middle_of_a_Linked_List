// C++ program for the finding middle of a Linked List

#include <iostream>
using namespace std;

class Node{
	public:
		int data;
		Node *next;
};

class NodeOperation{
public:
    // function to add nodes
	void pushNode(class Node** head_ref,int data_val){
		class Node *new_node = new Node();
		new_node->data = data_val;
		new_node->next = *head_ref;
		*head_ref = new_node;
	}
	
	// A utility function to print a given linked list
	void printNode(class Node *head){
		while(head != NULL){
			cout <<head->data << "->";
			head = head->next;
		}
		cout << "NULL" << endl;
	}
/*Method 1: Count the no. of nodes and return the node at count/2.  */
    int printMiddle(Node *head)
    {
        // Your code here
        int nodes=1;
        struct Node *temp = head;
        
        if(head == NULL)
            return -1;
        while(temp->next != NULL)
        {
            temp = temp->next;
            ++nodes;
        }
        for(int i = 0; i<nodes/2; i++)
        {
            head = head->next;
        }
        return head->data;
    }

/*Method 2: Using 2 Pointers*/
    int printMiddleTwoPointers(Node *head)
    {
        Node *slow_ptr = head;
        Node *fast_ptr = head;
        if(head == NULL)
            return -1;
        if(head != NULL)
        {
            while(fast_ptr!=NULL && fast_ptr->next!=NULL)
            {
                slow_ptr = slow_ptr->next;
                fast_ptr = fast_ptr->next->next;
            }
        }
        return slow_ptr->data;
    }
    
};

// Driver Code
int main(){
	class Node *head = NULL;
	class NodeOperation *temp = new NodeOperation();
	for(int i=99; i>0; i--){
		temp->pushNode(&head, i);
	
	}
		temp->printNode(head);
	cout <<	temp->printMiddle(head) << endl;
	cout << temp->printMiddleTwoPointers(head);
	return 0;
}
